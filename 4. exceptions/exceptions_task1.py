# Задание 1
# Напишите программу, которая запрашивает у пользователя: имя и возраст.
# После получения данных программа должна выводить приветствие в формате:
# «Привет, {имя}! Твой возраст – {возраст}». Обработайте исключение,
# возникающее при вводе некорректного возраста (возраст < 0 или возраст > 130),
# и выведите сообщение об ошибке. 

# name = input("Введите ваше имя: ")
# while True:
#     try:
#         age = int(input("Введите ваш возраст: "))
#         if age < 0 or age > 130:
#             raise ValueError("Некорректный возраст. Возраст должен быть от 0 до 130.")
#         break
#     except ValueError as e:
#         print(f"Ошибка: {e}")
# print(f"Привет, {name}! Твой возраст – {age}.")

###########################################################################

# Задание 2
# Реализуйте первое задание через функцию. Функция должна принимать имя
# и возраст в качестве параметров и возвращать отформатированную строку.
# Проверка корректности, полученных данные должна быть внутри функции.
# Создайте две версии реализации функции:
# Первая версия не обрабатывает исключение внутри функции. Вся обработка находится снаружи;
# Вторая версия обрабатывает исключение внутри функции.

# def greeting1(name, age):
#     if age < 0 or age > 130:
#         raise ValueError("Некорректный возраст. Возраст должен быть от 0 до 130.")
#     return f"Привет, {name}! Твой возраст – {age}."

# name = input("Введите ваше имя: ")

# while True:
#     try:
#         age = int(input("Введите ваш возраст: "))
#         greeting = greeting1(name, age)
#         break
#     except ValueError as e:
#         print(f"Ошибка: {e}")

# print(greeting)

###########################################################################

# def greeting2(name, age):
#     try:
#         if age < 0 or age > 130:
#             raise ValueError("Некорректный возраст. Возраст должен быть от 0 до 130.")
#         return f"Привет, {name}! Твой возраст – {age}."
#     except ValueError as e:
#         return f"Ошибка: {e}"

# name = input("Введите ваше имя: ")
# age = int(input("Введите ваш возраст: "))

# greeting = greeting2(name, age)
# print(greeting)

###########################################################################

# Задание 3
# Напишите программу, которая позволяет пользователю ввести с клавиатуры набор
# положительных (число больше нуля) чисел. Числа необходимо накапливать в списке.
# После получения всех значений, программа должна проанализировать данные.
# При обнаружении отрицательного значения программа должна сгенерировать
# исключение. Если все значения в списке положительные, программа должна
# возвратить на экран сумму всех чисел списка.
# Сгенерированное исключение должно быть обработано кодом программы. 

# numbers = []  # пустой список для накопления чисел

# try:
#     count = int(input("Введите количество чисел для ввода (положительное целое число): "))
#     if count <= 0:
#         raise ValueError("Количество чисел должно быть больше нуля!")
# except ValueError as e:
#     print(e)
#     exit()

# for i in range(count):
#     try:
#         num = int(input(f"Введите {i + 1}-е число из {count} (но только не отрицательное!): "))
#         if num < 0:
#             raise ValueError("Обнаружено отрицательное число!")
#         numbers.append(num)  # Добавляем число в список
#     except ValueError as e:
#         print(e)
#         exit()

# if numbers:
#     print("Сумма чисел:", sum(numbers))

###########################################################################

# Задание 4
# Реализуйте третье задание через функцию. Функция должна принимать список
# в качестве аргумента и возвращать сумму элементов списка. Проверка корректности,
# полученных данных должна быть внутри функции. Создайте две версии
# реализации функции:
# Первая версия не обрабатывает исключение внутри функции. Вся обработка
# находится снаружи;
# Вторая версия обрабатывает исключение внутри функции.

# def calculate_sum(numbers):
#     sum_result = 0

#     for num in numbers:
#         if num < 0:
#             raise ValueError("Обнаружено отрицательное число!")
#         sum_result += num
#     return sum_result

# numbers = []  # пустой список для накопления чисел

# try:
#     count = int(input("Введите количество чисел для ввода (положительное целое число): "))
#     if count <= 0:
#         raise ValueError("Количество чисел должно быть больше нуля!")
# except ValueError as e:
#     print(e)
#     exit()

# for i in range(count):
#     try:
#         num = int(input(f"Введите {i + 1}-е число из {count} (но только не отрицательное!): "))
#         if num < 0:
#             raise ValueError("Обнаружено отрицательное число!")
#         numbers.append(num)  # добавляем число в список
#     except ValueError as e:
#         print(e)
#         exit()

# try:
#     result = calculate_sum(numbers)
#     print("Сумма чисел:", result)
# except ValueError as e:
#     print(e)

###########################################################################

def calculate_sum(numbers):
    sum_result = 0
    for num in numbers:
        if num < 0:
            raise ValueError("Обнаружено отрицательное число!")
        sum_result += num
    return sum_result

numbers = []  # пустой список для накопления чисел

try:
    count = int(input("Введите количество чисел для ввода (положительное целое число): "))
    if count <= 0:
        raise ValueError("Количество чисел должно быть больше нуля!")
except ValueError as e:
    print(e)
    exit()

for i in range(count):
    try:
        num = int(input(f"Введите {i + 1}-е число из {count} (но только не отрицательное!): "))
        numbers.append(num)  # Добавляем число в список
    except ValueError as e:
        print(e)
        exit()

try:
    result = calculate_sum(numbers)
    print("Сумма чисел:", result)
except ValueError as e:
    print(e)
